// SYNTAX TEST "source.intens" "INTENS test cases"

// foo
// <- source.intens comment.line.double-slash.intens

DESCRIPTION "Test Syntax";
// <- keyword.control.intens
//                       ^ punctuation.terminator.statement.intens

INCLUDE external_file.inc
// <- keyword.control.import.intens
//                   ^ - punctuation.accessor.dot.intens

HELPFILE "myhelpfile.hlp",
  OPEN_FILE "my_help.html" HELPKEY("mykey"),
  OPEN_URL "https://www.semafor.ch/en/products/intens/";

USERGROUPS
// <- storage.type.other.intens
  some_user (
    "me", "you"
//      ^ punctuation.separator.delimiter.intens
  )
  , admin (
//^ punctuation.separator.delimiter.intens
    "someone"
  );
// ^ punctuation.terminator.statement.intens

LANGUAGE
USER_PATH = "";
//        ^ keyword.operator.assignment.intens
//            ^ punctuation.terminator.statement.intens
INTENS_PATH = "";
DESCRIPTION_FILE = "";
DOMAIN = "";
DEFAULT_LANG = "";
END LANGUAGE;

DATAPOOL
INTEGER one, two;
//  <- storage.type.intens
//      ^^^ punctuation.definition.variable.intens
//         ^ punctuation.separator.delimiter.intens
//           ^^^ punctuation.definition.variable.intens
//              ^ punctuation.terminator.statement.intens

COLOR mycolor1 ();
//  <- storage.type.intens
//    ^^^^^^^^ punctuation.definition.variable.intens
//             ^ punctuation.section.group.begin.intens
//              ^ punctuation.section.group.end.intens
//               ^ punctuation.terminator.statement.intens

REAL two_dimensional[5,2];
//                  ^ punctuation.section.brackets.begin.intens
//                    ^ punctuation.separator.delimiter.intens
//                      ^ punctuation.section.brackets.end.intens

COLOR mycolor2 (
//  <- storage.type.intens
//    ^^^^^^^^ punctuation.definition.variable.intens
//             ^ punctuation.section.group.begin.intens
        INVALID = (red, black),
//                    ^ punctuation.separator.delimiter.intens
//      ^^^^^^^ variable.parameter.intens
//              ^ keyword.operator.assignment.augmented.intens
//                            ^ punctuation.separator.delimiter.intens
        < 0 = ("#fff", "#f00"),
//              ^^^^ constant.other.color.rgb-value.hex.intens
//                            ^ punctuation.separator.delimiter.intens
        < foo.foo = ("#fff", "#000"),
//           ^ punctuation.accessor.dot.intens
        RANGE(0, <2.1) = ("#ffffff", "#00ff00"),
//      ^^^^^ support.function.builtin.intens
//            ^ constant.numeric.intens
//                ^^^ constant.numeric.intens
//                                             ^ punctuation.separator.delimiter.intens
        2 = ("#ffffff", "#0000ff"),
//        ^ keyword.operator.assignment.intens
//            ^^^^^^^ constant.other.color.rgb-value.hex.intens
//                                ^ punctuation.separator.delimiter.intens
        "mytext" = ( "#e0e0e0", "#e0e0e0" ),
//               ^ keyword.operator.assignment.intens
//                                         ^ punctuation.separator.delimiter.intens
        ELSE = ("#ffffff", "#0000ff")
//      ^^^^ variable.parameter.intens
//           ^ keyword.operator.assignment.augmented.intens
    );
//  ^ punctuation.section.group.end.intens
//   ^ punctuation.terminator.statement.intens

INTEGER baz {TOGGLE};
//  <- storage.type.intens
//      ^^^ punctuation.definition.variable.intens

REAL WHILE;
//  <- storage.type.intens
//   ^^^^^ invalid.illegal.name.intens

INTEGER {EDITABLE}
//  <- storage.type.intens
//       ^^^^^^^^ storage.modifier.intens
    foo {LABEL="mylabel", TOGGLE, FUNC=myfunc},
//  ^^^ punctuation.definition.variable.intens
//       ^^^^^ variable.parameter.intens - support.function.builtin.intens
//            ^ keyword.operator.assignment.augmented.intens
//                      ^ punctuation.separator.delimiter.intens
//                              ^ punctuation.separator.delimiter.intens
//                                     ^^^^^^ variable.function.intens
//                                            ^ punctuation.separator.delimiter.intens
    bar {COLOR=mycolor2};
//  ^^^ punctuation.definition.variable.intens
//                      ^ punctuation.terminator.statement.intens

SET myset ("zero"=0, "one"=1);
// <- storage.type.enum.intens
//  ^^^^^ entity.name.enum.intens
//        ^ punctuation.section.group.begin.intens
//                          ^ punctuation.section.group.end.intens
//                           ^ punctuation.terminator.statement.intens

SET myset2 {INVALID=NONE} ("X"=0, "Y"=1);
//         ^ punctuation.section.block.begin.intens
//                 ^ keyword.operator.assignment.augmented.intens
//                  ^^^^ constant.language.intens
//                      ^ punctuation.section.block.end.intens

SET myset3 ("A"=1, "B"=2), myset4 ("C"=3, "D"=4);
//                       ^ punctuation.separator.delimiter.intens
//                         ^^^^^^ entity.name.enum.intens

SET STRING ();
// <- storage.type.enum.intens
//  ^^^^^^ invalid.illegal.name.intens
//         ^ punctuation.section.group.begin.intens
//          ^ punctuation.section.group.end.intens
//           ^ punctuation.terminator.statement.intens

STRUCT MYSTRUCT {
// <- storage.type.struct.intens
//     ^^^^^^^^ entity.name.struct.intens
//              ^ punctuation.section.block.begin.intens
    INTEGER one, two;
//  ^^^^^^^ storage.type.intens
//          ^^^ punctuation.definition.variable.intens
//             ^ punctuation.separator.delimiter.intens
//               ^^^ punctuation.definition.variable.intens
//                  ^ punctuation.terminator.statement.intens
    REAL three;};
//  ^^^^ storage.type.intens
//       ^^^^^ punctuation.definition.variable.intens
//            ^ punctuation.terminator.statement.intens
//             ^ punctuation.section.block.end.intens
//              ^ punctuation.terminator.statement.intens

STRUCT MYSTRUCT_EXT : MYSTRUCT {
//                  ^ punctuation.separator.intens
//                    ^^^^^^^^ entity.other.inherited-class.intens
//                             ^ punctuation.section.block.begin.intens
    INTEGER four;
};
// <- punctuation.section.block.end.intens

STRUCT MYSTRUCT_EXT2 : WHILE {};
//                     ^^^^^ invalid.illegal.name.intens

STRUCT MYSTRUCT2 {
    INTEGER{ EDITABLE }
//  ^^^^^^^ storage.type.intens
        button1 {LABEL="mylabel", BUTTON, FUNC=myfunc},
        foo {SET=myset, UNIT="Hz"};
//               ^^^^^ storage.type.enum.intens

    MYSTRUCT bar;
    STRING baz {LABEL="My Label", LABEL};
};

STRUCT MULTI_INHERITANCE : MYSTRUCT, MYSTRUCT2 {};
//                                 ^ punctuation.separator.delimiter.intens
//                                   ^^^^^^^^^ entity.other.inherited-class.intens

MYSTRUCT2 { OMIT_TTRAIL } foo, foo2;
//                           ^ punctuation.separator.delimiter.intens

STRUCT REAL {};
// <- storage.type.struct.intens
//     ^^^^ invalid.illegal.name.intens
//          ^ punctuation.section.block.begin.intens
//           ^ punctuation.section.block.end.intens
//            ^ punctuation.terminator.statement.intens

STRUCT MYSTRUCT3 { INTEGER REAL;};
//               ^ punctuation.section.block.begin.intens
//                 ^^^^^^^ storage.type.intens
//                         ^^^^ invalid.illegal.name.intens
//                             ^ punctuation.terminator.statement.intens
//                              ^ punctuation.section.block.end.intens
//                               ^ punctuation.terminator.statement.intens

END DATAPOOL;
//          ^ punctuation.terminator.statement.intens

FUNCTIONS

FUNC myfunc, myfunc2;
// <- storage.type.function.intens
//   ^^^^^^ entity.name.function.intens
//         ^ punctuation.separator.delimiter.intens
//           ^^^^^^^ entity.name.function.intens
//                  ^ punctuation.terminator.statement.intens

FUNC
// <- storage.type.function.intens
    myfunc
//  ^^^^^^ entity.name.function.intens
  , myfunc2
//^ punctuation.separator.delimiter.intens
//  ^^^^^^^ entity.name.function.intens
  ;
//^ punctuation.terminator.statement.intens

END FUNCTIONS;
//           ^ punctuation.terminator.statement.intens

STREAMER

simple_stream (!foo, foo);
// <- punctuation.definition.variable.intens
//             ^ keyword.operator.logical.intens
//                       ^ punctuation.terminator.statement.intens

my_stream { XML {SCHEMA="myschema.xsd", VERSION="1.0"} }
//          ^^^ constant.language.intens
//                     ^ keyword.operator.assignment.augmented.intens
  (foo, bar, EOLN);

datapool_stream {XML} (DATAPOOL);
//                     ^^^^^^^^ variable.parameter.intens

my_stream2 {PROCESS="thefile.txt"} (
  foo, foo.baz:-10:2:TSEP
//            ^ punctuation.separator.slice.intens
//                ^ punctuation.separator.slice.intens
//                  ^ punctuation.separator.slice.intens
//                   ^^^^ constant.language.intens
);

my_stream3 (!foo[#A].bar.one);
//               ^^ keyword.other.intens
//                  ^ punctuation.accessor.dot.intens

END STREAMER;
//          ^ punctuation.terminator.statement.intens

OPERATOR

SOCKET my_socket {
//               ^ punctuation.section.block.begin.intens
      PORT=666,
//    ^^^^ variable.parameter.intens
//        ^ keyword.operator.assignment.augmented.intens
//         ^^^ constant.numeric.intens
//            ^ punctuation.separator.delimiter.intens
      STREAM=my_stream,
      FUNC=myfunc},
//         ^^^^^^ variable.function.intens
//               ^ punctuation.section.block.end.intens
//                ^ punctuation.separator.delimiter.intens
  my_socket2 {
//           ^ punctuation.section.block.begin.intens
      MFM,
      PORT=333,
      STREAM=my_stream2,
      FUNC=myfunc2,
//         ^^^^^^^ variable.function.intens
      ON_EOS=myfunc2,
//           ^^^^^^^ variable.function.intens
      ON_VIEW_ACTION=myfunc2,
//                   ^^^^^^^ variable.function.intens
      struct[*].data,
//             ^ punctuation.accessor.dot.intens
      THUMBNAIL(struct[*].thumbnail, 200, 200)},
//    ^^^^^^^^^ support.function.builtin.intens
//              ^^^^^^ variable.other.intens
//                       ^ punctuation.accessor.dot.intens
//                                            ^ punctuation.section.block.end.intens
//                                             ^ punctuation.separator.delimiter.intens
  my_socket3 {
    PORT=666,
    (
      HEADER="MYHEADER",
//                     ^ punctuation.separator.delimiter.intens
      REQUEST=my_stream,
//    ^^^^^^^ variable.parameter.intens
//           ^ keyword.operator.assignment.augmented.intens
      FUNC=myfunc,
//    ^^^^ variable.parameter.intens
//        ^ keyword.operator.assignment.augmented.intens
//         ^^^^^^ variable.function.intens
      RESPONSE=simple_stream
    )
  };

PROCESS myprocess_pr : BATCH { "myprocess.pl" };
// <- storage.type.other.intens
//      ^^^^^^^^^^^^ punctuation.definition.variable.intens
//                   ^ punctuation.separator.intens
//                     ^^^^^ storage.type.other.intens
//                                             ^ punctuation.terminator.statement.intens

PROCESSGROUP
// <- storage.type.other.intens
  myprocessgroup_pg { "My name",
                      FORM=NONE,
                      HIDDEN,
                      NO_LOG}
      (
        [(foo.bar[#]:-100, EOLN, foo.bar2)]
//                ^ keyword.other.intens
//                  ^ punctuation.separator.slice.intens
//                       ^ punctuation.separator.delimiter.intens
//                                  ^ punctuation.accessor.dot.intens
        = myprocess_pr
//      ^ keyword.operator.assignment
          (foo.bar, EOLN, foo.bar2);
      ),
     myprocessgroup2_pg {"My name2", FORM=NONE, HIDDEN}
//                                              ^^^^^^ variable.parameter.intens
      ([foo.bar] = myprocess_pr());
//         ^ punctuation.accessor.dot.intens

TIMER my_timer {FUNC=myfunc};
// <- storage.type.other.intens
//                   ^^^^^^ variable.function.intens

FILESTREAM myfilestream_fs = my_stream {"My Stream",
// <- storage.type.other.intens
//         ^^^^^^^^^^^^^^^ punctuation.definition.variable.intens
//                         ^ keyword.operator.assignment.augmented.intens
//                           ^^^^^^^^^ variable.other.intens
//                                     ^ punctuation.section.block.begin.intens
                                        FILTER="CSV (*.csv)",
//                                                          ^ punctuation.separator.delimiter.intens
                                        WRITEONLY};
//                                               ^ punctuation.section.block.end.intens
//                                                ^ punctuation.terminator.statement.intens

FILESTREAM myfilestream2_fs = my_stream2 {"My Stream2", HIDDEN},
//         ^^^^^^^^^^^^^^^^ punctuation.definition.variable.intens
//                          ^ keyword.operator.assignment.augmented.intens
//                            ^^^^^^^^^^ variable.other.intens
//                                                             ^ punctuation.separator.delimiter.intens
           myfilestream3_fs = my_stream3 {"My Stream3", HIDDEN};
//         ^^^^^^^^^^^^^^^^ punctuation.definition.variable.intens
//                          ^ keyword.operator.assignment.augmented.intens
//                            ^^^^^^^^^^ variable.other.intens
//                                                             ^ punctuation.terminator.statement.intens

TASK mytask {"Optimize"} {
  one = 1;
  WHILE( one<3 ) {
//^^^^^ meta.block.intens keyword.control.intens
    RUN myfunc;
//  ^^^ support.function.builtin.intens
//      ^^^^^^ variable.function.intens
  }
};

MESSAGE_QUEUE
  reply_mq {
    REPLY,
    PORT_REQUEST=334,
    ( HEADER="myheader1",
//  ^ punctuation.section.group.begin.intens
      FUNC=myfunc,
      RESPONSE(simple_stream, my_stream),
//            ^ punctuation.section.group.begin.intens
//                          ^ punctuation.separator.delimiter.intens
//                                     ^ punctuation.section.group.end.intens
      REQUEST(datapool_stream)
    ),
//  ^ punctuation.section.group.end.intens
//   ^ punctuation.separator.delimiter.intens
    ( HEADER="myheader2",
      FUNC=myfunc,
      RESPONSE(simple_stream, my_stream),
      REQUEST(datapool_stream)
    )
  };
// ^ punctuation.terminator.statement.intens

END OPERATOR;
//          ^ punctuation.terminator.statement.intens

FUNCTIONS

FUNC myfunc {
// <- storage.type.function.intens
//   ^^^^^^ entity.name.function.intens
//          ^ punctuation.section.block.begin.intens
    INTEGER foo, bar;
//  ^^^^^^^ storage.type.intens
//          ^^^ punctuation.definition.variable.intens
//             ^ punctuation.separator.delimiter.intens
//               ^^^ punctuation.definition.variable.intens
//                  ^ punctuation.terminator.statement.intens

    RUN( myfunc2 );
//     ^ punctuation.section.group.begin.intens
//       ^^^^^^^ variable.function.intens
//               ^ punctuation.section.group.end.intens
//                ^ punctuation.terminator.statement.intens

    RUN(foo.baz);
//      ^^^^^^^ - variable.function.intens
//         ^ punctuation.accessor.dot.intens

    SEND(HOST="localhost",
//       ^^^^ variable.parameter.intens
//           ^ keyword.operator.assignment.augmented.intens
//                       ^ punctuation.separator.delimiter.intens
         PORT=666,
//       ^^^^ variable.parameter.intens
//               ^ punctuation.separator.delimiter.intens
         STREAM=my_stream);
//       ^^^^^^ variable.parameter.intens

    SEND(HOST=foo.bar, PORT=333, STREAM=my_stream);
//               ^ punctuation.accessor.dot.intens

    folder = DIRNAME{DIRNAME=folder};
//         ^ keyword.operator.assignment.intens
//           ^^^^^^^ support.function.builtin.intens
//                  ^ punctuation.section.block.begin.intens
//                   ^^^^^^^ variable.parameter.intens - support.function.builtin.intens
//                          ^ keyword.operator.assignment.augmented.intens
//                                 ^ punctuation.section.block.end.intens
    DIRNAME(myfilestream_fs);
//  ^^^^^^^ support.function.builtin.intens

    foo = 1e3 + 1e-3 + 60E9 -7.9e-05 + 1e+009;
//        ^^^ constant.numeric.intens
//              ^^^^ constant.numeric.intens
//                     ^^^^ constant.numeric.intens
//                           ^^^^^^^ constant.numeric.intens
//                                     ^^^^^^ constant.numeric.intens

    WHILE(foo < (1 + 4)) {
//  ^^^^^ keyword.control.intens
//       ^ punctuation.section.group.begin.intens
//                     ^ punctuation.section.group.end.intens
        RUN( myfunc3 );
//         ^ punctuation.section.group.begin.intens
//           ^^^^^^^ variable.function.intens
//                   ^ punctuation.section.group.end.intens
//                    ^ punctuation.terminator.statement.intens
        IF (foo.bar != 3 && (VALID(foo))) {
//             ^ punctuation.accessor.dot.intens
//                  ^^ keyword.operator.comparison.intens
//                       ^^ keyword.operator.arithmetic.intens
//                           ^^^^^ support.function.builtin.intens
            INPUT = OLDVALUE;
//          ^^^^^ variable.language.intens
            THIS.buzz = 2;
//          ^^^^ variable.language.intens
//              ^ punctuation.accessor.dot.intens
        }
        ELSE {
            bar = ABS(bar - ROUND(1 + 4.8));
//                ^^^ support.function.builtin.intens
//                          ^^^^^ support.function.builtin.intens
            bar += 1.;
//                 ^^ constant.numeric.intens
            RETURN;
//          ^^^^^^ keyword.control.intens
//                ^ punctuation.terminator.statement.intens
        }
        foo++;
//         ^^ keyword.operator.arithmetic.intens
    }

    REQUEST(REQUEST=my_stream2, RESPONSE(my_stream, my_stream2), FUNC=myfunc2);
//                            ^ punctuation.separator.delimiter.intens
//                                                             ^ punctuation.separator.delimiter.intens
//                                                               ^^^^ variable.parameter.intens
//                                                                   ^ keyword.operator.assignment.augmented.intens
//                                                                    ^^^^^^^ variable.function.intens

    IF (! RUN(myfunc3) ){
        ABORT;
//      ^^^^^ keyword.control.intens
//           ^ punctuation.terminator.statement.intens
    }

    IF ( REASON_OPEN ) {
//  ^^ keyword.control.intens
//     ^ punctuation.section.group.begin.intens
//       ^^^^^^^^^^^ constant.other.intens
//                   ^ punctuation.section.group.end.intens
//                     ^ punctuation.section.block.begin.intens
        ABORT("Abort message");
//      ^^^^^ support.function.builtin.intens
//                            ^ punctuation.terminator.statement.intens
    }
//  ^ punctuation.section.block.end.intens
    ELSE IF ( REASON_CLOSE ) {
//  ^^^^ keyword.control.intens
//            ^^^^^^^^^^^^ constant.other.intens
//                           ^ punctuation.section.block.begin.intens
    }
//  ^ punctuation.section.block.end.intens

    MESSAGEBOX(COMPOSE("Finished %1!", "function"));
//  ^^^^^^^^^^ support.function.builtin.intens
//            ^ punctuation.section.group.begin.intens
//             ^^^^^^^ support.function.builtin.intens
//                               ^^ constant.character.format.placeholder.other.intens
//                                   ^ punctuation.separator.delimiter.intens
//                                               ^ punctuation.section.group.end.intens
    
    foo.VAR("bar").four = 5;
//     ^ punctuation.accessor.dot.intens
//      ^^^ support.function.builtin.intens
//                ^ punctuation.accessor.dot.intens
//                      ^ keyword.operator.assignment.intens

    SET(COLOR, foo.VAR("bar").three, 2);
//      ^^^^^ variable.parameter.intens
    SET(COLORBIT, foo.VAR("bar").three, 2);
//      ^^^^^^^^ variable.parameter.intens
//                    ^^^ support.function.builtin.intens
    SET(LOCK, foo.baz, TRUE);
//      ^^^^ variable.parameter.intens
//                     ^^^^ constant.language.intens

    PRINT("Important message: ", DATASET_TEXT(foo.foo), EOLN);

    MAP(foo.baz {INDEX=foo.one});
//              ^ punctuation.section.block.begin.intens
//               ^^^^^ variable.parameter.intens
//                    ^ keyword.operator.assignment.augmented.intens
//                            ^ punctuation.section.block.end.intens

    baz[INDEX] = "foo";
//     ^ punctuation.section.brackets.begin.intens
//           ^ punctuation.section.brackets.end.intens
    ENABLE(baz[INDEX]);
//            ^ punctuation.section.brackets.begin.intens
//             ^^^^^ constant.language.intens
//                  ^ punctuation.section.brackets.end.intens
}
// <-  punctuation.section.block.end.intens
;
// <- punctuation.terminator.statement.intens

FUNC myfunc2 {},
// <- storage.type.function.intens
//   ^^^^^^^ entity.name.function.intens
//           ^ punctuation.section.block.begin.intens
//            ^ punctuation.section.block.end.intens
//             ^ punctuation.separator.delimiter.intens
    myfunc3
//  ^^^^^^^ entity.name.function.intens
    {};
//  ^ punctuation.section.block.begin.intens
//   ^ punctuation.section.block.end.intens
//    ^ punctuation.terminator.statement.intens

FUNC{DEADLY_SILENT, UPDATE_FORMS=NONE, PRIORITY=HIGH}
// <- storage.type.function.intens
//  ^ punctuation.section.block.begin.intens
//   ^^^^^^^^^^^^^ variable.parameter.intens
//                ^ punctuation.separator.delimiter.intens
//                  ^^^^^^^^^^^^ variable.parameter.intens
//                              ^ keyword.operator.assignment
//                               ^^^^ constant.language.intens
//                                     ^^^^^^^^ variable.parameter.intens
//                                                  ^ punctuation.section.block.end.intens
    myfunc4 {};
//  ^^^^^^^ entity.name.function.intens

FUNC function_test {
  STRING mystring;

  mystring = COMPOSE_STRING("Just a %1", "test.") & LABEL(foo) & UNIT(foo.foo);
  mystring = COMPOSE_STRING("It is %1!", foo=="text");
//                                       ^^^ - variable.parameter.intens

  START(my_timer, PERIOD=1, DELAY=5);
//                ^^^^^^ variable.parameter.intens
//                          ^^^^^ variable.parameter.intens
  STOP(my_timer);
};

END FUNCTIONS;
//           ^ punctuation.terminator.statement.intens

UI_MANAGER

FIELDGROUP
// <- storage.type.other.intens
  mygroup_fg { MARGIN(0) } (
//             ^^^^^^ support.function.builtin.intens
    foo.foo,
//         ^ punctuation.separator.delimiter.intens
    foo.baz:10,
//         ^ punctuation.separator.slice.intens
    "<h3>Title</h3> <b>Bold</b>",
//   ^^^^ keyword.other.DML.html
//            ^^^^^ keyword.other.DML.html
//                  ^^^ keyword.other.DML.html
//                         ^^^^ keyword.other.DML.html
    "@text@ Text @huge@ Huge @large@ Large"
//   ^^^^^^ keyword.other.fontname.intens
//               ^^^^^^ keyword.other.fontname.intens
//                           ^^^^^^^ keyword.other.fontname.intens
  ),
  mygroup2_fg {TABLE ORIENTATION=VERTICAL} (
//             ^^^^^ variable.parameter.intens
//                   ^^^^^^^^^^^ variable.parameter.intens
  )
;

PLOT2D my_plot {"My Plot"} (
    plot { XAXIS { LABEL="X-Axis" },
//       ^ punctuation.section.block.begin.intens
//         ^^^^^ variable.parameter.intens
//               ^ punctuation.section.block.begin.intens
//                                ^ punctuation.section.block.end.intens
           YAXIS1 { LABEL="Y-Axis", FORMAT="10" }
//                ^ punctuation.section.block.begin.intens
//                                              ^ punctuation.section.block.end.intens
//         ^^^^^^ variable.parameter.intens
           } (
//         ^ punctuation.section.block.end.intens
    )
  )
;

FORM
  myform1 { "fancy name 1",
            HIDDEN,
            FUNC=myfunc4 }
    ( ),
//     ^ punctuation.separator.delimiter.intens
  myform2 { "fancy name 1",
            CLOSE_BUTTON=NONE,
            HIDE_CYCLE }
    ( ),
  logwin_form { "Logging Window" }
    (LOG_WINDOW { SIZE=2000 } );
//                ^^^^ variable.parameter.intens - support.function.builtin.intens
//                    ^ keyword.operator.assignment.augmented.intens

IMAGE img1 {
        SIZE(256,256),
//      ^^^^ support.function.builtin.intens
        SOCKET=my_socket,
        SETTINGS=foo.bar};
//                  ^ punctuation.accessor.dot.intens

INDEX my_index;
// <- storage.type.other.intens
//    ^^^^^^^^ punctuation.definition.variable.intens
//            ^ punctuation.terminator.statement.intens

FOLDER
  my_folder { LEFT, VERTICAL, STRETCH } (
        ["":baz, FUNC = myfunc4, FRAME] (mygroup_fg)
//         ^ punctuation.separator.slice.intens
//             ^ punctuation.separator.delimiter.intens
//               ^^^^ variable.parameter.intens
//                    ^ keyword.operator.assignment.augmented.intens
//                      ^^^^^^^ variable.function.intens
//                               ^^^^^ variable.parameter.intens
//                                       ^^^^^^^^^^ - variable.function.intens
    );

FOLDER WHILE {} ();
//     ^^^^^ invalid.illegal.name.intens

TABLE my_table {HORIZONTAL(TABLESIZE=7, RANGE(1)),
//              ^^^^^^^^^^ support.function.builtin.intens
//                         ^^^^^^^^^ variable.parameter.intens
//                                      ^^^^^ support.function.builtin.intens
                VERTICAL(TABLESIZE=7, RANGE(1))}
        (LEFT();
//             ^ punctuation.terminator.statement.intens
         TOP();
         TABLE(););
//                ^ punctuation.terminator.statement.intens

THERMO my_thermo {
            RANGE(256,256),
//          ^^^^^ support.function.builtin.intens
            ORIENTATION=VERTICAL,
//                      ^^^^^^^^ constant.language.intens
            SIZE(50,100), UNIT=UNIT(foo.foo)
//                        ^^^^ variable.parameter.intens
//                            ^ keyword.operator.assignment.augmented.intens
//                             ^^^^ support.function.builtin.intens
//                                 ^ punctuation.section.group.begin.intens
//                                  ^^^ -variable.parameter.intens
//                                         ^ punctuation.section.group.end.intens
        } (foo.bar);
//            ^ punctuation.accessor.dot.intens

MENU PRINT {EXPLICIT} (SEPARATOR),
// <- storage.type.other.intens
//          ^^^^^^^^ storage.modifier.intens
//                    ^ punctuation.section.group.begin.intens
//                     ^^^^^^^^^ variable.parameter.intens
//                              ^ punctuation.section.group.end.intens
//                               ^ punctuation.separator.delimiter.intens
     "&Tools" (FUNC hello_func="Show Hello World Message",
//             ^^^^ - storage.type.function.intens
//                  ^^^^^^^^^^ variable.function.intens
//                            ^ keyword.operator.assignment
//                                                       ^ punctuation.separator.delimiter.intens
               MENU "submenu" (FUNC myfunc4="Test"),
//             ^^^^ variable.parameter.intens
//                            ^ punctuation.section.group.begin.intens
//                                                ^ punctuation.section.group.end.intens
//                                                 ^ punctuation.separator.delimiter.intens
               FORM fancy_form,
//             ^^^^ variable.parameter.intens
//                            ^ punctuation.separator.delimiter.intens
               FUNC bye_func="Quit");
//             ^^^^ variable.parameter.intens - invalid.illegal.name.intens
//                                 ^ punctuation.section.group.end.intens
//                                  ^ punctuation.terminator.statement.intens

END UI_MANAGER;
//            ^ punctuation.terminator.statement.intens


DB_MANAGER {POSTGRES}
END DB_MANAGER;

END.
// <- keyword.other.intens
// ^ punctuation.terminator.propram.intens
