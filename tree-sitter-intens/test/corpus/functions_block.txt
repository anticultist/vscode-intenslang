=====================
empty functions block
=====================

FUNCTIONS
END FUNCTIONS;

---
(source_file
  (functions_block))

===================================
single function forward declaration
===================================

FUNCTIONS
  FUNC my_func;
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)))))

======================================
multiple function forward declarations
======================================

FUNCTIONS
  FUNC my_func, my_func2, my_func3;
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier))
      (function_declaration
        (function_identifier))
      (function_declaration
        (function_identifier)))))

==============================================
single function declaration with an empty body
==============================================

FUNCTIONS
  FUNC my_func {};
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier) (function_body)))))

===================================================
functions with forward declarations or empty bodies
===================================================

FUNCTIONS
  FUNC my_func{}, my_func2, my_func3{}, my_func4;
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier) (function_body))
      (function_declaration
        (function_identifier))
      (function_declaration
        (function_identifier) (function_body))
      (function_declaration
        (function_identifier)))))

===========================================
single function with empty options and body
===========================================

FUNCTIONS
  FUNC {} my_func{};
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (parameter_block)
      (function_declaration
        (function_identifier)
        (function_body)))))

===================
simple if statement
===================

FUNCTIONS
  FUNC my_func {
    IF (TRUE) ;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (if_statement
            (condition
              (true))
            (consequence
              (null_statement))))))))

===================================
if statement with complex condition
===================================

FUNCTIONS
  FUNC my_func {
    IF (foo < 42) ;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (if_statement
            (condition
              (binary_expression
                (identifier)
                (number)))
            (consequence
              (null_statement))))))))

=====================
combined if statement
=====================

FUNCTIONS
  FUNC my_func {
    IF (TRUE && TRUE) ;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (if_statement
            (condition
              (binary_expression
                (true)
                (true)))
            (consequence
              (null_statement))))))))

===================
if-else statement 1
===================

FUNCTIONS
  FUNC my_func {
    IF (FALSE) ;
    ELSE ;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (if_statement
            (condition (false))
            (consequence
              (null_statement))
            (else_part
              (null_statement))))))))

===================
if-else statement 2
===================

FUNCTIONS
  FUNC my_func {
    IF (is_name_given)
      MESSAGEBOX(COMPOSE("Hello %1!", name));
    ELSE
      MESSAGEBOX("Hello World!");
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (if_statement
            (condition
              (identifier))
            (consequence
              (function_call
                (function_name)
                (function_arguments
                  (function_call
                    (function_name)
                    (function_arguments
                      (string)
                      (identifier))))))
            (else_part
              (function_call
                (function_name)
                (function_arguments
                  (string))))))))))

==============================
ambiguous if-if-else statement
==============================

FUNCTIONS
  FUNC my_func {
    IF (TRUE)
      IF (FALSE) ;
      ELSE ;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (if_statement
            (condition (true))
            (consequence
              (if_statement
                (condition (false))
                (consequence
                  (null_statement))
                (else_part
                  (null_statement))))))))))

=================
simple while loop
=================

FUNCTIONS
  FUNC my_func {
    WHILE (FALSE) ;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (while_loop
            (condition (false))
            (null_statement)))))))

==================
complex while loop
==================

FUNCTIONS
  FUNC my_func {
    WHILE (foo < 4) ;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (while_loop
            (condition
              (binary_expression
                (identifier) (number)))
            (null_statement)))))))

===============
function blocks
===============

FUNCTIONS
  FUNC my_func {
    WHILE (FALSE) {
      IF (TRUE) {
      } ELSE {
      }
    }
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (while_loop
            (condition (false))
            (block
              (if_statement
                (condition (true))
                (consequence (block))
                (else_part
                  (block))))))))))

================
return statement
================

FUNCTIONS
  FUNC my_func {
    RETURN;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (return))))))

==============
exit statement
==============

FUNCTIONS
  FUNC my_func {
    EXIT;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (exit))))))

=================
abort statement 1
=================

FUNCTIONS
  FUNC my_func {
    ABORT;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (abort))))))

=================
abort statement 2
=================

FUNCTIONS
  FUNC my_func {
    ABORT("Lorem ipsum" + EOLN + "Foo bar!");
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (abort
            (function_arguments
              (binary_expression
                (binary_expression
                  (string)
                  (eoln))
                (string)))))))))

===================
increment statement
===================

FUNCTIONS
  FUNC my_func {
    i++;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (update_expression
            (identifier)))))))

===================
decrement statement
===================

FUNCTIONS
  FUNC my_func {
    foo.bar[i]--;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (update_expression
            (attribute
              (identifier)
              (field_expression
                (identifier)
                (list (identifier))))))))))

====================
variable declaration
====================

FUNCTIONS
  FUNC my_func {
    INTEGER a;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (variables_declaration
            (primitive_type)
            (variable_declaration (variable_identifier))))))))


======================
variables declarations
======================

FUNCTIONS
  FUNC my_func {
    INTEGER a, b, c;
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (variables_declaration
            (primitive_type)
            (variable_declaration (variable_identifier))
            (variable_declaration (variable_identifier))
            (variable_declaration (variable_identifier))))))))

=============
function call
=============

FUNCTIONS
  FUNC my_func {
    RUN( my_func2 );
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (function_call
            (function_name)
            (function_arguments
              (identifier))))))))

====================
nested function call
====================

FUNCTIONS
  FUNC my_func {
    MESSAGEBOX(COMPOSE("Finished %1!", "function"));
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (function_call
            (function_name)
            (function_arguments
              (function_call
                (function_name)
                (function_arguments
                  (string)
                  (string))))))))))

=========================================================
function call with a string containing escaped characters
=========================================================

FUNCTIONS
  FUNC my_func {
    MESSAGEBOX("\"" + "Lorem" + EOLN + "ipsum" + "\"");
  };
END FUNCTIONS;

---
(source_file
  (functions_block
    (functions_declaration
      (function_declaration
        (function_identifier)
        (function_body
          (function_call
            (function_name)
            (function_arguments
              (binary_expression
                (binary_expression
                  (binary_expression
                    (binary_expression
                      (string (escape_sequence))
                      (string))
                    (eoln))
                  (string))
                (string (escape_sequence))))))))))
