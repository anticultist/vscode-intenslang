======
number
======

foo = 1;

---
(source_file
  (assignment
    (identifier)
    (number)))

==========
identifier
==========

foo = bar;

---
(source_file
  (assignment
    (identifier)
    (identifier)))

======
string
======

foo = "Lorem ipsum";

---
(source_file
  (assignment
    (identifier)
    (string)))

=================
number addition 1
=================

foo = 1 + 2;

---
(source_file
  (assignment
    (identifier)
      (binary_expression
        (number) (number))))

=================
number addition 2
=================

foo = 1 + 2 + 3;

---

(source_file
  (assignment
    (identifier)
      (binary_expression
        (binary_expression
          (number) (number))
        (number))))

===================
identifier addition
===================

foo = bar + baz;

---
(source_file
  (assignment
    (identifier)
    (binary_expression
      (identifier) (identifier))))

===============
string addition
===============

foo = "bar" + "baz";

---
(source_file
  (assignment
    (identifier)
    (binary_expression
      (string) (string))))

==================
number subtraction
==================

foo = 1 - 2;

---
(source_file
  (assignment
    (identifier)
      (binary_expression
        (number) (number))))

======================
identifier subtraction
======================

foo = bar - baz;

---
(source_file
  (assignment
    (identifier)
      (binary_expression
        (identifier) (identifier))))

=====================
number multiplication
=====================

foo = 1 * 2;

---
(source_file
  (assignment
    (identifier)
      (binary_expression
        (number) (number))))

=========================
identifier multiplication
=========================

foo = bar * baz;

---
(source_file
  (assignment
    (identifier)
      (binary_expression
        (identifier) (identifier))))

==============================
complex arithmetic operation 1
==============================

foo = 1 * 2 + 3;

---
(source_file
  (assignment (identifier)
    (binary_expression
      (binary_expression (number) (number))
      (number))))

==============================
complex arithmetic operation 2
==============================

foo = 1 + 2 * 3;

---
(source_file
  (assignment
    (identifier)
      (binary_expression (number)
      (binary_expression (number) (number)))))

===============================
number addition with bracketing
===============================

foo = (1 + 2);

---
(source_file
  (assignment
    (identifier)
    (tuple
      (binary_expression
        (number) (number)))))

==============================================
complex arithmetic operation with bracketing 1
===============================================

foo = (1 + 2) * (3 - 4);

---
(source_file
  (assignment
    (identifier)
    (binary_expression
      (tuple
        (binary_expression (number) (number)))
      (tuple
        (binary_expression (number) (number))))))

==================
boolean comparison
==================

foo = 1 < 2;

---

(source_file
  (assignment
    (identifier)
    (binary_expression
      (number) (number))))

=========
increment
=========

foo += 1.;

---
(source_file
  (assignment
    (identifier) (number)))

================
function usage 1
================

foo = COMPOSE_STRING("bar %1", "baz");

---
(source_file
  (assignment
    (identifier)
    (function_call
      (function_name)
      (function_arguments
        (string)
        (string)))))

================
function usage 2
================

foo = COMPOSE_STRING("It is %1!", foo=="text");

---
(source_file
  (assignment
    (identifier)
    (function_call
      (function_name)
      (function_arguments
        (string)
        (binary_expression
          (identifier)
          (string))))))

==================
field expression 1
==================

foo.bar = bar.foo;

---
(source_file
  (assignment
    (field_expression
      (identifier)
      (identifier))
    (field_expression
      (identifier)
      (identifier))))

==================
field expression 2
==================

foo = bar[#A].baz;

---
(source_file
  (assignment
    (identifier)
    (field_expression
      (identifier)
      (list (wildcard))
      (identifier))))

==================
field expression 3
==================

foo.VAR("bar").baz = 5;

---
(source_file
  (assignment
    (field_expression
      (identifier)
      (var_usage (string))
      (identifier))
    (number)))

==================
field expression 4
==================

foo[INDEX] = "lorem ipsum";

---
(source_file
  (assignment
    (field_expression
      (identifier)
      (list (identifier)))
    (string)))

==================
field expression 5
==================

foo = COMPARE(foo.bar_baz[*]:19, THIS.object[m,n]);

==================
unary expression 1
==================

foo = !bar;

---
(source_file
  (assignment
    (identifier)
    (unary_expression
      (identifier))))

==================
unary expression 2
==================

foo = (-(2^31) - offset) / factor;

---
(source_file
  (assignment
    (identifier)
    (binary_expression
      (tuple
        (binary_expression
          (unary_expression
            (tuple
              (binary_expression
                (number)
                (number))))
          (identifier)))
      (identifier))))
