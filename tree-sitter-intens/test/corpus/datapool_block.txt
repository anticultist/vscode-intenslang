====================
empty datapool block
====================

DATAPOOL
END DATAPOOL;

---
(source_file
  (datapool_block))

==========================
primitive type declaration
==========================

DATAPOOL
  CDATA a;
  COMPLEX c;
  INTEGER d;
  REAL e;
  STRING f;
END DATAPOOL;

---
(source_file
  (datapool_block
    (variables_declaration (primitive_type) (variable_declaration (variable_identifier)))
    (variables_declaration (primitive_type) (variable_declaration (variable_identifier)))
    (variables_declaration (primitive_type) (variable_declaration (variable_identifier)))
    (variables_declaration (primitive_type) (variable_declaration (variable_identifier)))
    (variables_declaration (primitive_type) (variable_declaration (variable_identifier)))))

=============================
multiple variable declaration
=============================

DATAPOOL
  INTEGER a, b, c;
END DATAPOOL;

---
(source_file
  (datapool_block
    (variables_declaration
      (primitive_type)
        (variable_declaration (variable_identifier))
        (variable_declaration (variable_identifier))
        (variable_declaration (variable_identifier)))))

=====================================
variable declarations with parameters
=====================================

DATAPOOL
  INTEGER {EDITABLE}
    foo {TOGGLE, BUTTON},
    bar {RADIO};
END DATAPOOL;

---
(source_file
  (datapool_block
    (variables_declaration
      (primitive_type)
        (parameter_block (parameter (identifier)))
        (variable_declaration (variable_identifier) (parameter_block (parameter (identifier)) (parameter (identifier))))
        (variable_declaration (variable_identifier) (parameter_block (parameter (identifier)))))))

=====================================================
variable declarations with parameters and assignments
=====================================================

DATAPOOL
  INTEGER {EDITABLE}
    foo { LABEL="my label", TOGGLE, FUNC=my_func };
END DATAPOOL;

---
(source_file
  (datapool_block
    (variables_declaration
      (primitive_type)
      (parameter_block
        (parameter (identifier)))
      (variable_declaration
        (variable_identifier)
        (parameter_block
          (parameter_assignment
            (parameter (identifier))
            (string))
          (parameter (identifier))
          (parameter_assignment
            (parameter (identifier))
            (identifier)))))))

=======================
variable with dimension
=======================

DATAPOOL
  INTEGER foo[3];
END DATAPOOL;

---
(source_file
  (datapool_block
    (variables_declaration
      (primitive_type)
        (variable_declaration (variable_identifier) (dimension (number))))))

=======================================
variable with dimensions and parameters
=======================================

DATAPOOL
  INTEGER foo[3, 4] {TOGGLE};
END DATAPOOL;

---
(source_file
  (datapool_block
    (variables_declaration
      (primitive_type)
      (variable_declaration
        (variable_identifier)
        (dimension (number) (number))
        (parameter_block (parameter (identifier)))))))

=================
set declaration 1
=================

DATAPOOL
  SET my_set1 ("1", "2"),
      my_set2 ("3", "4");
END DATAPOOL;

---
(source_file
  (datapool_block
    (sets_declaration
      (set_declaration (set_identifier) (set_item (string)) (set_item (string)))
      (set_declaration (set_identifier) (set_item (string)) (set_item (string))))))

=================
set declaration 2
=================

DATAPOOL
  SET my_set ("A" = 1, "B" = 2);
END DATAPOOL;

---
(source_file
  (datapool_block
    (sets_declaration
      (set_declaration
        (set_identifier)
        (set_item (set_assignment (string) (number)))
        (set_item (set_assignment (string) (number)))))))

=================
set declaration 3
=================

DATAPOOL
  SET my_set ("A" = "a", "B" = "b");
END DATAPOOL;

---
(source_file
  (datapool_block
    (sets_declaration
      (set_declaration
        (set_identifier)
        (set_item (set_assignment (string) (string)))
        (set_item (set_assignment (string) (string)))))))

==============================
set declaration with parameter
==============================

DATAPOOL
  SET my_set1 {GLOBAL, INVALID=NONE} ("");
END DATAPOOL;

=======================
structure declaration 1
=======================

DATAPOOL
  STRUCT MY_STRUCT {};
END DATAPOOL;

---
(source_file
  (datapool_block
    (structure_declaration
      (structure_identifier))))

=======================
structure declaration 2
=======================

DATAPOOL
  STRUCT MY_STRUCT {
    INTEGER one, two;
    REAL three;
  };
END DATAPOOL;

---
(source_file
  (datapool_block
    (structure_declaration
      (structure_identifier)
      (variables_declaration
        (primitive_type)
        (variable_declaration (variable_identifier))
        (variable_declaration (variable_identifier)))
      (variables_declaration
        (primitive_type)
        (variable_declaration (variable_identifier))))))

======================================
structure declaration with inheritance
======================================

DATAPOOL
  STRUCT MY_STRUCT_EXT : MY_STRUCT {};
END DATAPOOL;

---
(source_file
  (datapool_block
    (structure_declaration
      (structure_identifier)
      (inheritance (parent)))))

============================================
structure declaration with multi-inheritance
============================================

DATAPOOL
  STRUCT MY_STRUCT_EXT : MY_STRUCT, MY_STRUCT2 {};
END DATAPOOL;

---
(source_file
  (datapool_block
    (structure_declaration
      (structure_identifier)
      (inheritance
        (parent)
        (parent)))))

=================
color declaration
=================
DATAPOOL
  COLOR my_color1 ();
END DATAPOOL;

---
(source_file
  (datapool_block
    (colors_declaration
      (color_declaration (color_identifier) (color_set)))))

===========================
complex color declaration 1
===========================

DATAPOOL
  COLOR my_color2 (
    INVALID = (red, black),
    < 0 = ("#fff", "#f00"),
    < foo.bar.baz = ("#fff", "#000"),
    RANGE(0, <2.1) = ("#ffffff", "#00ff00"),
    2 = ("#ffffff", "#0000ff"),
    "my text" = ( "#e0e0e0", "#e0e0e0" ),
    ELSE = ("#ffffff", "#0000ff")
  );
END DATAPOOL;

---
(source_file
  (datapool_block
    (colors_declaration
      (color_declaration
        (color_identifier)
        (color_set
          (color_set_item
            (tuple (identifier) (identifier)))
          (color_set_item
            (color_set_value (number))
            (tuple (string) (string)))
          (color_set_item
            (color_set_value
              (field_expression (identifier) (identifier) (identifier)))
            (tuple (string) (string)))
          (color_set_item
            (color_set_range
              (color_set_value (number))
              (color_set_value (number)))
            (tuple (string) (string)))
          (color_set_item
            (color_set_value (number))
            (tuple (string) (string)))
          (color_set_item
            (color_set_value (string))
            (tuple (string) (string)))
          (color_set_item
            (tuple (string) (string))))))))

===========================
complex color declaration 2
===========================

DATAPOOL
  COLOR kfm_response_color (
    < foo.bar1 * foo.bar2 = ("#285ac8","#285ac8"),
    > foo.bar4 * foo.bar4 = ("#c82828","#c82828"),
    ELSE = ("#5ac828","#5ac828")
  );
END DATAPOOL;

---
(source_file
  (datapool_block
    (colors_declaration
      (color_declaration
        (color_identifier)
        (color_set
          (color_set_item
            (color_set_value
              (binary_expression
                (field_expression (identifier) (identifier))
                (field_expression (identifier) (identifier))))
            (tuple (string) (string)))
          (color_set_item
            (color_set_value
              (binary_expression
                (field_expression (identifier) (identifier))
                (field_expression (identifier) (identifier))))
            (tuple (string) (string)))
          (color_set_item
            (tuple (string) (string))))))))


===========================
complex color declaration 3
===========================

DATAPOOL
  COLOR foo (
    > bar = ("#c85028","#000000"),
    ELSE = ("#abc828","#000000")
  );
END DATAPOOL;

---
(source_file
  (datapool_block
    (colors_declaration
      (color_declaration
        (color_identifier)
        (color_set
          (color_set_item
            (color_set_value (identifier))
            (tuple (string) (string)))
          (color_set_item
            (tuple (string) (string))))))))

================================
custom variable type declaration
================================

DATAPOOL
  MY_STRUCT { OMIT_TTRAIL } foo, bar;
END DATAPOOL;

---

(source_file
  (datapool_block
    (custom_variable_type_declaration
      (parameter_block
        (parameter (identifier)))
      (variable_declaration
        (variable_identifier))
      (variable_declaration
        (variable_identifier)))))

==============================================
struct with a custom variable type declaration
==============================================

DATAPOOL
  STRUCT FOO
  {
    MY_STRUCT bar;
  };
END DATAPOOL;

---
(source_file
  (datapool_block
    (structure_declaration
      (structure_identifier)
      (custom_variable_type_declaration
        (variable_declaration
          (variable_identifier))))))
